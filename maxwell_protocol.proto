syntax = "proto3";

package maxwell.protocol;

/* msg type enum */

enum msg_type_t {
  /* unused, placeholder for some impls */

  UNKNOWN = 0;

  /* common protocols: 1~32 */

  PING_REQ = 1;
  PING_REP = 2;
  OK_REP = 29;
  ERROR_REP = 30;
  OK2_REP = 31;
  ERROR2_REP = 32;

  /* business protocols: 33~64 */

  PUSH_REQ = 33;
  PUSH_REP = 34;
  PULL_REQ = 35;
  PULL_REP = 36;
  REQ_REQ = 39;
  REQ_REP = 40;
  AUTH_REQ = 41;
  AUTH_REP = 42;

  /* management protocols: 65~120 */

  REGISTER_FRONTEND_REQ = 65;
  REGISTER_FRONTEND_REP = 66;
  REGISTER_BACKEND_REQ = 67;
  REGISTER_BACKEND_REP = 68;
  REGISTER_SERVICE_REQ = 69;
  REGISTER_SERVICE_REP = 70;

  SET_ROUTES_REQ = 71;
  SET_ROUTES_REP = 72;
  GET_ROUTES_REQ = 75;
  GET_ROUTES_REP = 76;

  GET_TOPIC_DIST_CHECKSUM_REQ = 77;
  GET_TOPIC_DIST_CHECKSUM_REP = 78;
  GET_ROUTE_DIST_CHECKSUM_REQ = 79;
  GET_ROUTE_DIST_CHECKSUM_REP = 80;

  PICK_FRONTEND_REQ = 81;
  PICK_FRONTEND_REP = 82;
  PICK_FRONTENDS_REQ = 83;
  PICK_FRONTENDS_REP = 84;
  LOCATE_TOPIC_REQ = 85;
  LOCATE_TOPIC_REP = 86;
  CHECK_TOPIC_REQ = 87;
  CHECK_TOPIC_REP = 88;

  /* util protocols: 121~127 */

  RESOLVE_IP_REQ = 121;
  RESOLVE_IP_REP = 122;
}

/* msg type defs */

/* common protocols: 1~32*/

message ping_req_t { uint32 ref = 15; }

message ping_rep_t { uint32 ref = 15; }

message ok_rep_t { uint32 ref = 15; }

message error_rep_t {
  int32 code = 1;
  string desc = 2;
  uint32 ref = 15;
}

message ok2_rep_t {
  uint32 conn0_ref = 13;
  uint32 conn1_ref = 14;
  uint32 ref = 15;
}

message error2_rep_t {
  int32 code = 1;
  string desc = 2;
  uint32 conn0_ref = 13;
  uint32 conn1_ref = 14;
  uint32 ref = 15;
}

/* business protocols: 33~64 */

message push_req_t {
  string topic = 1;
  bytes value = 2;
  uint32 ref = 15;
}

message push_rep_t { uint32 ref = 15; }

message pull_req_t {
  string topic = 1;
  int64 offset = 2; // int64, not uint64
  uint32 limit = 3;
  uint32 conn0_ref = 13;
  uint32 conn1_ref = 14;
  uint32 ref = 15;
}

message pull_rep_t {
  repeated msg_t msgs = 1;
  uint32 conn0_ref = 13;
  uint32 conn1_ref = 14;
  uint32 ref = 15;
}

message req_req_t {
  string path = 1;
  string payload = 2;
  header_t header = 12;
  uint32 conn0_ref = 13;
  uint32 conn1_ref = 14;
  uint32 ref = 15;
}

message req_rep_t {
  string payload = 1;
  uint32 conn0_ref = 13;
  uint32 conn1_ref = 14;
  uint32 ref = 15;
}

message auth_req_t {
  string token = 1;
  uint32 conn0_ref = 13;
  uint32 conn1_ref = 14;
  uint32 ref = 15;
}

message auth_rep_t {
  uint32 conn0_ref = 13;
  uint32 conn1_ref = 14;
  uint32 ref = 15;
}


/* management protocols: 65~120 */

message register_frontend_req_t {
  uint32 http_port = 1;
  uint32 ref = 15;
}

message register_frontend_rep_t { uint32 ref = 15; }

message register_backend_req_t {
  uint32 http_port = 1;
  uint32 ref = 15;
}

message register_backend_rep_t { uint32 ref = 15; }

message register_service_req_t {
  uint32 http_port = 1;
  uint32 ref = 15;
}

message register_service_rep_t { uint32 ref = 15; }

message set_routes_req_t {
  repeated string paths = 1;
  uint32 ref = 15;
}

message set_routes_rep_t { uint32 ref = 15; }

message get_routes_req_t {
   uint32 ref = 15; 
}

message get_routes_rep_t {
  repeated route_group_t route_groups = 1;
  uint32 ref = 15;
}

message get_topic_dist_checksum_req_t {
   uint32 ref = 15;
  }

message get_topic_dist_checksum_rep_t {
  uint32 checksum = 1;
  uint32 ref = 15;
}

message get_route_dist_checksum_req_t {
   uint32 ref = 15;
}

message get_route_dist_checksum_rep_t {
  uint32 checksum = 1;
  uint32 ref = 15;
}

message pick_frontend_req_t { uint32 ref = 15; }

message pick_frontend_rep_t {
  string endpoint = 1;
  uint32 ref = 15;
}

message pick_frontends_req_t { uint32 ref = 15; }

message pick_frontends_rep_t {
  repeated string endpoints = 1;
  uint32 ref = 15;
}

message locate_topic_req_t {
  string topic = 1;
  uint32 ref = 15;
}

message locate_topic_rep_t {
  string endpoint = 1;
  uint32 ref = 15;
}

message check_topic_req_t {
  string topic = 1;
  uint32 ref = 15;
}

message check_topic_rep_t {
  string assigned_endpoint = 1;
  string checker_endpoint = 2;
  uint32 ref = 15;
}

/* util protocols: 121~127 */

message resolve_ip_req_t { uint32 ref = 15; }

message resolve_ip_rep_t {
  string ip = 1;
  uint32 ref = 15;
}

/* data type defs */

message msg_t {
  uint64 offset = 1;
  bytes value = 2;
  uint64 timestamp = 3;
}

message header_t {
  string agent = 1;
  string endpoint = 2;
  string token = 3;
}

message route_group_t {
  string path = 1;
  repeated string healthy_endpoints = 2;
  repeated string unhealthy_endpoints = 3;
}

/* error code enum */

enum error_code_t {
  /* common error codes: 0~99 */
  OK = 0;
  UNKNOWN_MSG = 1;

  /* master error codes: 100~199 */
  NOT_ALLOWED_TO_REGISTER_FRONTEND = 100;
  NOT_ALLOWED_TO_REGISTER_BACKEND = 101;
  NOT_ALLOWED_TO_REGISTER_SERVICE = 102;
  FAILED_TO_PICK_FRONTEND = 103;
  FAILED_TO_LOCATE_TOPIC = 104;
  FAILED_TO_CHECK_TOPIC = 105;
  MASTER_ERROR = 199;

  /* frontend error codes: 200~299 */
  FAILED_TO_REQUEST_SERVICE = 200;
  FAILED_TO_REQUEST_BACKEND = 201;
  FRONTEND_ERROR = 299;

  /* backend error codes: 300~399 */
  FAILED_TO_PUSH = 300;
  FAILED_TO_PULL = 301;
  UNKNOWN_TOPIC = 302;
  BACKEND_ERROR = 399;

  /* service error codes: 400~499 */
  UNKNOWN_PATH = 400;
  SERVICE_ERROR = 499;

  /* client error codes: 500~599 */
  CLIENT_ERROR = 599;
}